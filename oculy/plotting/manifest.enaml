# --------------------------------------------------------------------------------------
# Copyright 2020 by Oculy Authors, see git history for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# --------------------------------------------------------------------------------------
"""Plotting plugin manifest.

"""
from matplotlib.
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint

from .plots import (
    Axes,
    Axis,
    Colorbar,
    Cursor,
    Plot,
    Figure,
    Plot1DLine,
    Plot1DBar,
    Plot2DRectangularMesh,
    Plot2DContour
)


if TYPE_CHECKING:
    from .plugin import Plo

def plotting_plugin_factory() -> "PlottingPlugin":
    """ Factory funcion for the plotting plugin.

    """
    from .plugin import PlottingPlugin
    return PlottingPlugin()


enamldef PlottingManifest(PluginManifest):
    """Manifest of the plotting plugin.

    """
    id = "oculy.plotting"
    factory = None  # FIXME

    ExtensionPoint:
        id = "plots"

    ExtensionPoint:
        id = "rendering-backend"

    Extension:
        id = "builtin-plots"
        point = "oculy.plotting.plots"
        Plot:
            id = "line-plot"
            get_cls => ():
                return Plot1DLine
         Plot:
            id = "histogram"
            get_cls => ():
                return Plot1DHistogram
        Plot:
            id = "rectangular-mesh"
            get_cls => ():
                return Plot2DRectangularMesh
        Plot:
            id = "contour"
            get_cls => ():
                return Plot2DContour

    Extension:
        id = "matplotlib-backend"
        point = "oculy.plotting.rendering-backend"
        Backend:
            id = "matplotlib"
            proxies => ():
                from .backends.matplotlib import (
                    MatplotlibAxesProxy,
                    MatplotlibAxisProxy,
                    MatplotlibColorbarProxy,
                    MatplotlibCursorProxy,
                    MatplotlibFigureProxy,
                )
                return {Axes: MatplotlibAxesProxy,
                        Axis: MatplotlibAxisProxy,
                        Colorbar: MatplotlibColorbarProxy,
                        Cursor: MatplotlibCursorProxy,
                        Figure, MatplotlibFigureProxy}
            plot_proxies => ():
                from .backend.matplotlib import (
                    Matplotlib1DLineProxy,
                    Matplotlib1DBarProxy,
                    Matplotlib2DRectangularMeshProxy,
                    Matplotlib2DContourProxy
                )
                return {Plot1DLine: Matplotlib1DLineProxy,
                        Plot1DBar: Matplotlib1DBarProxy,
                        Plot2DRectangularMesh: Matplotlib2DRectangularMeshProxy,
                        Plot2DContour: Matplotlib2DContourProxy}
            colormaps => ():
                return {
                    'Perceptually Uniform ': [
                        'viridis', 'plasma', 'inferno', 'magma', 'cividis'
                    ],
                    'Sequential': [
                        'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
                        'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
                        'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn',
                        'binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',
                        'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',
                        'hot', 'afmhot', 'gist_heat', 'copper'
                    ],
                    'Diverging': [
                        'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',
                        'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'
                    ]
                }

    # FIXME should have commands I guess
